awk '
BEGIN {
    idx = 1
}
$7 - $6 + 1 >= 1000 && $11 - $10 + 1 >= 1000 {
    if (!($1 in vertex_map)) {
        vertex_map[$1] = idx
        idx++
    }
    if (!($2 in vertex_map)) {
        vertex_map[$2] = idx
        idx++
    }
    print vertex_map[$1], vertex_map[$2], $6, $7, $8, $10, $11, $12
}
' data.txt > "$translated_data"

node_degrees=$(cut -d' ' -f1,2 "$translated_data" | sort | uniq -c | awk '{print $2, $1}')
echo "Node Degree Distribution:"
echo "Degree    Count"
echo "$node_degrees"

# Compute the number of components with at least three vertices
components=$(awk '{print $1, $2}' "$translated_data" | sort -u | awk '{print $1}' | uniq -c | awk '$1 >= 3 {print $2}' | wc -l)
echo "Number of Components with at least three vertices: $components"

# Compute the component density distribution
awk '{print $1, $2}' "$translated_data" | sort -u | while read -r vertex; do
    vertex_id=$(echo "$vertex" | awk '{print $1}')
    num_edges=$(grep -wc "$vertex_id" "$translated_data")
    num_possible_edges=$(echo "$num_edges * ($num_edges - 1) / 2" | bc)
    density=$(echo "scale=2; $num_edges / $num_possible_edges" | bc)
    echo "$density"
done | sort -n | uniq -c | awk '{print $2, $1}' > component_densities.txt

# Print the component density distribution
echo "Component Density Distribution:"
echo "Density    Count"
cat component_densities.txt
